// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  admin
  staff
}

enum PaymentMethod {
  Card
  Cash
}

enum RoomStatus {
  available
  out_of_service
  cleaning
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum AdjustmentType {
  percentage
  fixed
}

// Models
model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  phone        String?
  password_hash String
  role         UserRole
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  // Relationships
  hotel_users     HotelUsersPivot[]
  refresh_tokens  RefreshToken[]

  @@map("users")
}

model Hotel {
  id                    String    @id @default(uuid()) @db.Uuid
  name                  String
  location              String
  contact_info          Json?
  policies              String?
  default_checkin_time  String?
  default_checkout_time String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  // Relationships
  rooms       Room[]
  hotel_users HotelUsersPivot[]

  @@map("hotels")
}

model HotelUsersPivot {
  id       String @id @default(uuid()) @db.Uuid
  user_id  String @db.Uuid
  hotel_id String @db.Uuid

  // Relationships
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hotel Hotel @relation(fields: [hotel_id], references: [id], onDelete: Cascade)

  @@unique([user_id, hotel_id])
  @@map("hotel_users_pivot")
}

model Room {
  id                String     @id @default(uuid()) @db.Uuid
  hotel_id          String     @db.Uuid
  name              String
  description       String?
  size_sqm          Int?
  bed_setup         String?
  base_price        Decimal    @db.Decimal(10,2) // Price in euros (for website/direct bookings)
  airbnb_price      Decimal?   @db.Decimal(10,2) // Price in euros for Airbnb (optional - defaults to base_price if null)
  booking_com_price Decimal?   @db.Decimal(10,2) // Price in euros for Booking.com (optional - defaults to base_price if null)
  max_capacity      Int
  status            RoomStatus @default(available)
  amenities         Json?
  pet_fee           Decimal?   @db.Decimal(10,2) // Pet fee in euros
  minimum_nights    Int?       // Minimum nights required for booking
  cleaning_fee      Decimal?   @db.Decimal(10,2) // Cleaning fee in euros
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  // Relationships
  hotel         Hotel         @relation(fields: [hotel_id], references: [id], onDelete: Cascade)
  bookings      Booking[]
  blocked_dates BlockedDate[]
  room_photos   RoomPhoto[]
  rate_rules    RateRule[]
  reviews       Review[]

  @@index([hotel_id])
  @@map("rooms")
}

model Booking {
  id               String        @id @default(uuid()) @db.Uuid
  room_id          String        @db.Uuid
  reference_number String        @unique
  guest_name       String
  guest_contact    String?
  guest_email      String
  check_in_date    DateTime      @db.Date
  check_out_date   DateTime      @db.Date
  total_cost       Decimal       @db.Decimal(10,2) // Cost in euros
  status           BookingStatus @default(pending)
  source           String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  // Relationships
  room     Room      @relation(fields: [room_id], references: [id], onDelete: Cascade)
  payments Payment[]
  review   Review?

  @@index([room_id, status])
  @@index([reference_number])
  @@map("bookings")
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  booking_id     String        @db.Uuid
  amount         Decimal       @db.Decimal(10,2) // Amount in euros
  payment_method PaymentMethod
  identifier     String?
  created_at     DateTime      @default(now())

  // Relationships
  booking Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)

  @@map("payments")
}

model BlockedDate {
  id           String   @id @default(uuid()) @db.Uuid
  room_id      String   @db.Uuid
  blocked_date DateTime @db.Date
  notes        String?
  created_at   DateTime @default(now())

  // Relationships
  room Room @relation(fields: [room_id], references: [id], onDelete: Cascade)

  @@unique([room_id, blocked_date])
  @@index([room_id, blocked_date])
  @@map("blocked_dates")
}

model RoomPhoto {
  id         String @id @default(uuid()) @db.Uuid
  room_id    String @db.Uuid
  image_url  String
  sort_order Int    @default(0)

  // Relationships
  room Room @relation(fields: [room_id], references: [id], onDelete: Cascade)

  @@map("room_photos")
}

model RateRule {
  id              String @id @default(uuid()) @db.Uuid
  room_id         String @db.Uuid
  start_date      DateTime @db.Date
  end_date        DateTime @db.Date
  price_per_night Decimal @db.Decimal(10,2) // Price in euros
  min_stay_nights Int?
  day_of_week     Int[]  // Array of integers (0-6, Sunday-Saturday)
  source          String?

  // Relationships
  room Room @relation(fields: [room_id], references: [id], onDelete: Cascade)

  @@index([room_id, start_date, end_date])
  @@map("rate_rules")
}

model Review {
  id           String   @id @default(uuid()) @db.Uuid
  booking_id   String   @unique @db.Uuid
  room_id      String   @db.Uuid
  rating       Int      // 1-5 scale
  comment      String?
  is_published Boolean  @default(false)
  created_at   DateTime @default(now())

  // Relationships
  booking Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  room    Room    @relation(fields: [room_id], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model RefreshToken {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @unique
  user_id    String   @db.Uuid
  expires_at DateTime
  created_at DateTime @default(now())

  // Relationships
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("refresh_tokens")
}